/////////////////////////////////////////////////////////////////////
////                                                             ////
////  Author: Sumira Fernando                                    ////
////          k.w.s.v.fernanfo@gmail.com                         ////
////                                                             ////
////                                                             ////
/////////////////////////////////////////////////////////////////////
////                                                             ////
//// Copyright (C) 2023                                          ////
////                                                             ////
//// This source file may be used and distributed without        ////
//// restriction provided that this copyright statement is not   ////
//// removed from the file and that any derivative work contains ////
//// the original copyright notice and the associated disclaimer.////
////                                                             ////
//// This source file is free software; you can redistribute it  ////
//// and/or modify it under the terms of the GNU Lesser General  ////
//// Public License as published by the Free Software Foundation.////
////                                                             ////
//// This source is distributed in the hope that it will be      ////
//// useful, but WITHOUT ANY WARRANTY; without even the implied  ////
//// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR     ////
//// PURPOSE.  See the GNU Lesser General Public License for more////
//// details. http://www.gnu.org/licenses/lgpl.html              ////
////                                                             ////
/////////////////////////////////////////////////////////////////////

Image Gray Scaling Design with APB interface access to memory - For Reference purposes
  supported
      Three gray scaling methods : 
		- Averaging method
		- Weighted Average method 
		- Desaturation method
	  General Memory with two APB accesses , one for read and one for write
		- 1 Memory for RGB image which has APB access to write only 
		- 1 Memory for processed image ( all 3 methods ) which has APB read only access
	  Fully parameterized design and verification environment
	  Easy extendable ( parameterized ) and reduced latency by supporting parallel writing to the processed RGB memory
	  Design has well written SV state machines. 
  Simulator
      Xilinx xsim free simulator ( 2021 or later ) 
	  Easy setup to convert to other commercial simulator
	  
  To do:
	UVM based fully verification system with coverage 

  folder
    ./src         : SystemVerilog memory designs
    ./packages    : SystemVerilog packages for design
    ./tb_module   : SystemVerilog testbench , with one simple image loading ( Testing based on application point of view )
    ./run         : Run folder with file list and Makefile


How to run:

1. set up your test env
  1.1 Make sure to install simulator or change the Makefile and filelist options according to the simulator requirement

  1.2 Go to run folder and execute any make target after clean

2. how to run example
  cd run
  make clean run_module
  
3. To convert image into 1D array use Matlab or Labview or any other familiar tool

4. To convert processed data into a png use Matlab or Labview or any other familiar tool

Note: The test image is 200x200 flower colour image . testbench is adjusted accordingly since it is always software responsibility to handle the avialble hardware resources. 


The image before processing :  image/flower.png

The image after processing in all 3 methods :  image/result.png

